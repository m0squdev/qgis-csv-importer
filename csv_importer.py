# -*- coding: utf-8 -*-
"""
/***************************************************************************
 CsvImporter
                                 A QGIS plugin
 This plugin imports a CSV file into your project
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-09-27
        git sha              : $Format:%H$
        copyright            : (C) 2024 by m0squdev
        email                : valerio.mosqu@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.core import (
    QgsPointXY,
    QgsFeature,
    QgsField,
    QgsGeometry,
    QgsPalLayerSettings,
    QgsProject,
    QgsRuleBasedLabeling,
    QgsTextFormat,
    QgsVectorLayer
)
from qgis.PyQt.QtCore import QCoreApplication, QPointF, QSettings, QTranslator, QVariant
from qgis.PyQt.QtGui import QColor, QIcon, QPolygonF
from qgis.PyQt.QtWidgets import QAction

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .csv_importer_dialog import CsvImporterDialog
import os.path

import pandas as pd

class CsvImporter:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'CsvImporter_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&CSV Importer')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('CsvImporter', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/csv_importer/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Import data from CSV file'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&CSV Importer'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = CsvImporterDialog()

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            usecols = ["label", "coordinates"]
            data = pd.read_csv(self.dlg.mQgsFileWidget.filePath(), usecols=usecols)

            points_layer = QgsVectorLayer("Point?crs=EPSG:4326", "Points from CSV file", "memory")
            points_provider = points_layer.dataProvider()
            points_provider.addAttributes([QgsField("label", QVariant.String)])
            points_layer.updateFields()

            polygons_layer = QgsVectorLayer("Polygon?crs=EPSG:4326", "Polygons from CSV file", "memory")
            polygons_provider = polygons_layer.dataProvider()
            polygons_provider.addAttributes([QgsField("label", QVariant.String)])
            polygons_layer.updateFields()

            for index, row in data.iterrows():
                coordinates = [float(coordinate) for coordinate in row.coordinates.split(",")]
                if len(coordinates) % 2 != 0:
                    raise IndexError("Coordinates must be in pairs.")
                elif len(coordinates) == 2:
                    point = QgsPointXY(coordinates[0], coordinates[1])
                    geometry = QgsGeometry.fromPointXY(point)
                    feature = QgsFeature()
                    feature.setGeometry(geometry)
                    feature.setAttributes([row.label])
                    points_provider.addFeature(feature)
                else:
                    points = [QgsPointXY(coordinates[n], coordinates[n + 1]) for n in range(0, len(coordinates), 2)]
                    #points = [QgsPointXY(12, 40), QgsPointXY(13, 40), QgsPointXY(13, 41), QgsPointXY(12, 41), QgsPointXY(12, 40)]
                    print(points)
                    geometry = QgsGeometry.fromPolygonXY([points])
                    """point = QPointF()
                    list_polygon = QPolygonF()
                    for n in range(0, len(coordinates), 2):
                        point.setX(coordinates[n])
                        point.setY(coordinates[n + 1])
                        list_polygon.append(point)
                        geometry = QgsGeometry.fromQPolygonF(list_polygon)"""
                    feature = QgsFeature()
                    feature.setGeometry(geometry)
                    feature.setAttributes([row.label])
                    polygons_provider.addFeature(feature)

            layer_settings = QgsPalLayerSettings()
            layer_settings.enabled = True
            layer_settings.fieldName = "label"
            layer_settings.placement = QgsPalLayerSettings.Placement.AroundPoint

            text_format = QgsTextFormat()
            text_format.setSize(10)
            text_format.setColor(QColor("blue"))
            layer_settings.setFormat(text_format)

            root = QgsRuleBasedLabeling.Rule(QgsPalLayerSettings())
            rule = QgsRuleBasedLabeling.Rule(layer_settings)
            rule.setDescription("label")
            root.appendChild(rule)
            rules = QgsRuleBasedLabeling(root)
            points_layer.setLabeling(rules)
            points_layer.setLabelsEnabled(True)

            points_layer.triggerRepaint()
            polygons_layer.triggerRepaint()
            QgsProject.instance().addMapLayer(points_layer)
            QgsProject.instance().addMapLayer(polygons_layer)
